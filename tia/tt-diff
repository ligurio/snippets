#!/usr/bin/env python

# Copyright 2018 Sergey Bronnikov
#
# This is free software, licensed under the Apache License, Version 2.0,
# available in the accompanying LICENSE.txt file.

import codecs
import urllib2
import unittest
import optparse
import sys

from unidiff.patch import PatchSet, PatchedFile, Hunk

"""
- process binaries and changed functions
    abidiff or abicheck etc
    radiff
    courgette
    clang-diff
- process patch, source code and print changed functions
"""


def affected_lines(patch):
    changes = {}
    for p in patch:
        lines = []
	if p.is_added_file:
        	print added_files
        	changes[p.path] = []
        	continue
        if isinstance(p.added, tuple):
            lines = lines + list(p.added)
        else:
            lines.append(p.added)
        if isinstance(p.removed, tuple):
            lines = lines + list(p.removed)
        else:
            lines.append(p.removed)
        changes[p.path] = sorted(lines)
	for pp in p:
		print "kuku", type(pp)
		for a in pp.source_lines():
			#if not a.is_context:
				# print a
			if a.is_added or a.is_removed:
				print a.source_line_no, a.target_line_no, a.diff_line_no
		for b in pp.target_lines():
			#if not b.is_context:
			# print b
			if b.is_added or b.is_removed:
				print b.source_line_no, b.target_line_no, b.diff_line_no

    return changes

diff = 'hello.patch'
with codecs.open(diff, 'r', encoding='utf-8') as diff:
    patch = PatchSet(diff)
    print affected_lines(patch)

#url_patch = 'https://github.com/checkpoint-restore/criu/commit/5a39cc6f0c61d79fd1a469e66cdecbe8e5bba484.patch'
#diff = urllib2.urlopen(url_patch)
#encoding = diff.headers.getparam('charset')
#patch = PatchSet(diff, encoding=encoding)
#print affected_lines(patch)

def test_diff():
    url_patch = 'https://github.com/checkpoint-restore/criu/commit/5a39cc6f0c61d79fd1a469e66cdecbe8e5bba484.patch'
    diff = urllib2.urlopen(url_patch)
    encoding = diff.headers.getparam('charset')
    patch = PatchSet(diff, encoding=encoding)

    assert(len(patch) == 1)
    assert(patch.is_added_file == False)
    assert(patch.added == 2)
    assert(patch.removed == 1)


class PlainDiffParser():

    def __init__():
        pass


class BinDiffParser():

    def __init__():
        pass

formats = {
    "binary": BinDiffParser,
    "text": PlainDiffParser,
}

def naturalJoin(values):
    if len(values) >= 2:
        return ', '.join(values[:-1]) + ' or ' + values[-1]

    else:
        return ''.join(values)


def main(argv=None):
    """
    Process text patch or compare binary files and
    prints tests covered changes.

    Usage:
        tt-diff

    By default, JSON output will be written to stdout.
    """

    formatNames = list(formats.keys())
    formatNames.sort()

    optparser = optparse.OptionParser(
        usage="\n\t%prog [options] [file] ...")
    optparser.add_option(
        '-o', '--output', metavar='FILE',
        type="string", dest="output",
        help="output filename [stdout]")
    optparser.add_option(
        '-i', '--input', metavar='FILE',
        type="string", dest="input",
        help="input filename [stdin]")
    optparser.add_option(
        '-t', '--type',
        type="choice", choices=formatNames,
        dest="type", default="text",
        help="type: %s [default: %%default]" % naturalJoin(formatNames))
    (options, args) = optparser.parse_args(sys.argv[1:])

    if not options.input:
        optparser.error('no input file')

    # TODO: map CLI options to functions
    #process_cobertura(options.input)


if __name__ == '__main__':
    main()
