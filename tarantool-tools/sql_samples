SELECT * FROM t;
SELECT * FROM t;
SELECT i + a FROM t;
SELECT i - a FROM t;
SELECT i * a FROM t;
SELECT i / a FROM t;
SELECT i % a FROM t;]]
SELECT i & a FROM t;]]
SELECT i | a FROM t;]]
SELECT i >> a FROM t;]]
SELECT i << a FROM t;]]
SELECT i - a FROM t ORDER BY 1 LIMIT 1;]]
SELECT -5 % -1;]]
SELECT -5 % 1;]]
SELECT a FROM t ORDER BY b LIMIT 1;]]
SELECT a FROM t ORDER BY b LIMIT 1 OFFSET 1;]]
SELECT * FROM "_session_settings" ]]
CREATE VIEW v AS SELECT * FROM t0;]]
SELECT CASE 1 WHEN 1 THEN NULL ELSE NULL END;]]
SELECT CASE 1 WHEN 1 THEN 1 ELSE ? END;]]
SELECT CASE 1 WHEN 1 THEN [1] ELSE [2, 2] END;]]
SELECT CASE 1 WHEN 1 THEN 1 ELSE {1 : 1} END;]]
SELECT CASE 1 WHEN 1 THEN 1 ELSE {1 : 1} END;]]
SELECT CASE 1 WHEN 1 THEN 1 ELSE 'asd' END;]]
SELECT CASE 1 WHEN 1 THEN 1 ELSE CAST(1 AS NUMBER) END;]]
SELECT CASE 1 WHEN 1 THEN -1 ELSE CAST(1 AS UNSIGNED) END;]]
SELECT CASE 1 WHEN 1 THEN -1 ELSE 1.5e0 END;]]
SELECT CASE 1 WHEN 1 THEN -1 WHEN 2 THEN 1.5 ELSE 2e0 END;]]
SELECT typeof(CASE 1 WHEN 1 THEN 1 ELSE {1 : 1} END);]]
SELECT typeof(CASE 1 WHEN 1 THEN 1 ELSE 'asd' END);]]
SELECT typeof(CASE 1 WHEN 1 THEN -1 ELSE 1.5e0 END);]]
SELECT LUA('return 0/0'), TYPEOF(LUA('return 0/0'));]]
SELECT "gh_6572.get_nan"(), TYPEOF("gh_6572.get_nan"());]]
SELECT 1.0 > LUA('return 0/0');]]
SELECT @1asd;]]
SELECT @1asd;]]
SELECT itv FROM t0;]]
SELECT itv FROM t0 GROUP BY itv;]]
SELECT * FROM (SELECT * FROM t0 LIMIT 2 OFFSET 1);]]
SELECT DISTINCT itv FROM t0;]]
CREATE VIEW v AS SELECT itv FROM t0;]]
SELECT * FROM v;]]
SELECT * FROM t0 LIMIT (SELECT itv FROM t0 LIMIT 1);]]
SELECT * FROM t0 LIMIT 1 OFFSET (SELECT itv FROM t0 LIMIT 1);]]
INSERT INTO t SELECT * from t0 LIMIT 1;]]
SELECT RETURN_TYPE(itv) FROM t0;]]
SELECT RETURN_INTERVAL();]]
SELECT "sql_interval.is_interval"(itv) FROM t0;]]
SELECT "sql_interval.ret_interval"(itv) FROM t0;]]
SELECT ABS(itv) FROM t0;]]
SELECT AVG(itv) FROM t0;]]
SELECT CHAR(itv) FROM t0;]]
SELECT CHARACTER_LENGTH(itv) FROM t0;]]
SELECT CHAR_LENGTH(itv) FROM t0;]]
SELECT COALESCE(NULL, itv, NULL, NULL) FROM t0;]]
SELECT COUNT(itv) FROM t0;]]
SELECT GREATEST(itv, itv) FROM t0;]]
SELECT GROUP_CONCAT(itv) FROM t0;]]
SELECT HEX(itv) FROM t0;]]
SELECT IFNULL(itv, NULL) FROM t0;]]
SELECT LEAST(itv, itv) FROM t0;]]
SELECT LENGTH(itv) FROM t0;]]
SELECT itv LIKE 'a' FROM t0;]]
SELECT LIKELIHOOD(itv, 0.5e0) FROM t0;]]
SELECT LIKELY(itv) FROM t0;]]
SELECT LOWER(itv) FROM t0;]]
SELECT MAX(itv) FROM t0;]]
SELECT MIN(itv) FROM t0;]]
SELECT NULLIF(itv, '1') FROM t0;]]
SELECT POSITION(itv, '1') FROM t0;]]
SELECT RANDOMBLOB(itv) FROM t0;]]
SELECT REPLACE(itv, '1', '2') FROM t0;]]
SELECT ROUND(itv) FROM t0;]]
SELECT SOUNDEX(itv) FROM t0;]]
SELECT SUBSTR(itv, 3, 3) FROM t0;]]
SELECT SUM(itv) FROM t0;]]
SELECT TOTAL(itv) FROM t0;]]
SELECT TRIM(itv) FROM t0;]]
SELECT TYPEOF(itv) FROM t0;]]
SELECT UNICODE(itv) FROM t0;]]
SELECT UNLIKELY(itv) FROM t0;]]
SELECT UPPER(itv) FROM t0;]]
SELECT itv || itv FROM t0;]]
SELECT CAST(itv AS UNSIGNED) FROM t0;]]
SELECT CAST(itv AS INTEGER) FROM t0;]]
SELECT CAST(itv AS STRING) FROM t0;]]
SELECT CAST(itv AS NUMBER) FROM t0;]]
SELECT CAST(itv AS DOUBLE) FROM t0;]]
SELECT CAST(itv AS BOOLEAN) FROM t0;]]
SELECT CAST(itv AS VARBINARY) FROM t0;]]
SELECT CAST(itv AS SCALAR) FROM t0;]]
SELECT CAST(itv AS UUID) FROM t0;]]
SELECT CAST(itv AS DATETIME) FROM t0;]]
SELECT CAST(itv AS ANY) FROM t0;]]
SELECT CAST(itv AS INTERVAL) FROM t0;]]
SELECT CAST(1 AS INTERVAL);]]
SELECT CAST('1' AS INTERVAL);]]
SELECT CAST('+10 seconds' AS INTERVAL);]]
SELECT CAST(CAST(1 AS NUMBER) AS INTERVAL);]]
SELECT CAST(1e0 AS INTERVAL);]]
SELECT CAST(true AS INTERVAL);]]
SELECT CAST(x'33' AS INTERVAL);]]
SELECT CAST(? AS INTERVAL);]]
st/sql-luatest/interval_test.lua:        local sql = [[SELECT CAST(
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT itv FROM t0;]]
INSERT INTO t SELECT i, itv FROM t0;]]
SELECT a FROM t;]]
INSERT INTO t SELECT i, itv FROM t0;]]
SELECT it FROM t;]]
st/sql-luatest/interval_test.lua:                      SELECT new.i, new.itv; END;]])
INSERT INTO ta SELECT * FROM t0;]]
SELECT itv FROM tb;]]
INSERT INTO t SELECT * FROM t0;]]
SELECT * FROM t0 JOIN t on t0.itv = t.itv;]]
INSERT INTO t SELECT * FROM t0;]]
SELECT * FROM t0 LEFT JOIN t on t0.itv = t.itv;]]
INSERT INTO t SELECT * FROM t0;]]
SELECT * FROM t0 INNER JOIN t on t0.itv = t.itv;]]
SELECT -itv FROM t0;]]
SELECT itv + 1 FROM t0;]]
SELECT itv - 1 FROM t0;]]
SELECT itv / 2 FROM t0;]]
SELECT itv * 1 FROM t0;]]
SELECT itv % 1 FROM t0;]]
SELECT ~itv FROM t0;]]
SELECT itv >> 1 FROM t0;]]
SELECT itv << 1 FROM t0;]]
SELECT itv | 1 FROM t0;]]
SELECT itv & 1 FROM t0;]]
SELECT NOT itv FROM t0;]]
SELECT itv AND true FROM t0;]]
SELECT itv OR true FROM t0;]]
SELECT itv > 1 FROM t0;]]
SELECT itv < '1' FROM t0;]]
SELECT itv == '2001-01-01T01:00:00Z' FROM t0;]]
SELECT itv >= CAST(1 AS NUMBER) FROM t0;]]
SELECT itv <= 1e0 FROM t0;]]
SELECT itv > true FROM t0;]]
SELECT itv < x'33' FROM t0;]]
SELECT itv == CAST(1 AS SCALAR) FROM t0;]]
st/sql-luatest/interval_test.lua:        local sql = [[SELECT itv >
SELECT ?;]]
SELECT $1;]]
SELECT #a;]]
SELECT ?;]]
SELECT '1' + '2';]]
SELECT 1 + '2';]]
SELECT '1' - '2';]]
SELECT 1 - '2';]]
SELECT '1' * '2';]]
SELECT 1 * '2';]]
SELECT '1' / '2';]]
SELECT 1 / '2';]]
SELECT '1' % '2';]]
SELECT 1 % '2';]]
SELECT {'a' : 123};]]
SELECT {'a' : 123.1};]]
SELECT {'a' : 123.1e0};]]
SELECT {'a' : CAST(123 AS NUMBER)};]]
SELECT {'a' : '123'};]]
SELECT {'a' : x'313233'};]]
SELECT {'a' : true};]]
SELECT {'a' : CAST(123 AS SCALAR)};]]
SELECT {'a' : ]]
SELECT {'a' : [1, 2, 3]};]]
SELECT {'a' : {'a': 1, 'b' : 2, 'c' : 3}};]]
SELECT {123 : 123};]]
SELECT {123.1 : 123};]]
SELECT {123.1e0 : 123};]]
SELECT {CAST(123 AS NUMBER) : 123};]]
SELECT {'a' : 123};]]
SELECT {x'313233' : 123};]]
SELECT {true : 123};]]
SELECT {CAST(123 AS SCALAR) : 123};]]
SELECT {CAST('11111111-1111-1111-1111-111111111111' ]]
SELECT {[1, 2, 3]: 123};]]
SELECT {{'a': 1, 'b' : 2, 'c' : 3}: 123};]]
SELECT {'a' : a} FROM (SELECT 123 AS a);]]
SELECT {a : 123} FROM (SELECT 123 AS a);]]
SELECT {1 + 2 : 123};]]
SELECT {'a' : 1 + 2};]]
SELECT typeof({'a' : 123});]]
SELECT printf({});]]
};]]
SELECT {:name};]]
SELECT {:name : 5};]]
SELECT {5::name};]]
);]]
SELECT {'a' : 1, 'a' : 2, 'b' : 3, 'a' : 4};]]
SELECT a, b, i FROM t ORDER BY a, b LIMIT 1;]]
SELECT * FROM t ORDER BY a ASC, b DESC LIMIT 3;]]
SELECT * FROM t ORDER BY a DESC, b ASC LIMIT 3;]]
SELECT * FROM t ORDER BY i DESC, a ASC LIMIT 3;]]
SELECT * FROM t ORDER BY a ASC, i DESC, b ASC LIMIT 3;]]
SELECT * FROM t ORDER BY a ASC, b DESC LIMIT 3 OFFSET 2;]]
SELECT * FROM t ORDER BY a DESC, b ASC LIMIT 3 OFFSET 3;]]
SELECT * FROM t ORDER BY i DESC, a ASC LIMIT 3 OFFSET 4;]]
SELECT * FROM t ORDER BY a ASC, i DESC, b ASC LIMIT 3 OFFSET 7;]]
SELECT "t1"."a" FROM (SELECT "a" FROM "t") AS "t1";]]
SELECT [123, 234, 356, 467][2];]]
SELECT {'one' : 123, 3 : 'two', '123' : true}[3];]]
SELECT {'one' : [11, 22, 33], 3 : 'two'}['one'][2];]]
SELECT {'one' : 123, 3 : 'two', '123' : true}['three'];]]
SELECT 1[1];]]
SELECT -1[1];]]
SELECT 1.1[1];]]
SELECT 1.2e0[1];]]
SELECT '1'[1];]]
SELECT x'31'[1];]]
SELECT true[1];]]
SELECT uuid()[1];]]
SELECT now()[1];]]
SELECT (now() - now())[1];]]
SELECT CAST(1 AS NUMBER)[1];]]
SELECT CAST(1 AS SCALAR)[1];]]
SELECT CAST(1 AS ANY)[1];]]
SELECT CAST([1] AS ANY)[1];]]
SELECT NULL[1];]]
SELECT CAST(NULL AS ARRAY)[1];]]
SELECT [1, 2, 3][1][2];]]
SELECT [1, 2, 3][1][2][3][4][5][6][7];]]
SELECT ([1, 2, 3][1])[2];]]
SELECT typeof([123, 234, 356, 467][2]);]]
SELECT [123, 234, 356, 467][2];]]
SELECT typeof({'one' : 123, 3 : 'two', '123' : true}[3]);]]
SELECT {'one' : 123, 3 : 'two', '123' : true}[3];]]
SELECT typeof({'one' : [11, 22, 33], 3 : 'two'}['one']);]]
SELECT {'one' : [11, 22, 33], 3 : 'two'}['one'];]]
SELECT ROUND(1.2345678901234e0, 2147483647);]]
SELECT DISTINCT a FROM ta;]]
SELECT DISTINCT m FROM tm;]]
SELECT a FROM ta GROUP BY a;]]
SELECT m FROM tm GROUP BY m;]]
SELECT 1 > [1];]]
INSERT INTO t(i) SELECT a, i FROM t;]]
INSERT INTO t SELECT a, i, 1 FROM t;]]
SELECT a.i FROM t AS a, t;]]
SELECT * FROM "_vspace";]]
SELECT * FROM "_vspace";]]
SELECT * FROM t;]]
st/sql-luatest/sql_func_expr_test.lua:        def.body = 'a + (SELECT "id" AS a FROM "_space" LIMIT 1);'
st/sql-luatest/gh_6989_nullif_result_type_test.lua:        local sql = "SELECT nullif(1, '2');"
st/sql-luatest/gh_6989_nullif_result_type_test.lua:        sql = "SELECT nullif('1', '1');"
st/sql-luatest/gh_6989_nullif_result_type_test.lua:        sql = "SELECT nullif([1], '2');"
st/sql-luatest/gh_6989_nullif_result_type_test.lua:        sql = "SELECT nullif(1, [2]);"
SELECT * FROM t;]]
SELECT * FROM t WHERE i + 1 > 2;]]
SELECT * FROM t WHERE a > 2;]]
SELECT max(i) FROM t;]]
SELECT min(i) FROM t;]]
SELECT * FROM t WHERE i = 2;]]
SELECT * FROM t WHERE i > 2;]]
SELECT * FROM t WHERE i < 2;]]
SELECT * FROM SEQSCAN t;]]
SELECT * FROM SEQSCAN t WHERE i > 2;]]
SELECT * FROM SEQSCAN t WHERE i + 1 > 2;]]
SELECT * FROM SEQSCAN t WHERE a > 2;]]
SELECT * FROM t, s;]]
SELECT * FROM SEQSCAN t, s;]]
SELECT * FROM t, SEQSCAN s;]]
SELECT * FROM SEQSCAN t, SEQSCAN s;]]
SELECT * FROM t, s USING(i);]]
SELECT * FROM SEQSCAN t, s USING(i);]]
SELECT * FROM t, s USING(i) WHERE i > 2;]]
SELECT * FROM t JOIN s;]]
SELECT * FROM SEQSCAN t JOIN s;]]
SELECT * FROM t JOIN SEQSCAN s;]]
SELECT * FROM SEQSCAN t JOIN SEQSCAN s;]]
SELECT * FROM t JOIN s USING(i);]]
SELECT * FROM SEQSCAN t JOIN s USING(i);]]
SELECT * FROM t JOIN s USING(i) WHERE i > 2;]]
SELECT * FROM t LEFT JOIN s;]]
SELECT * FROM SEQSCAN t LEFT JOIN s;]]
SELECT * FROM t LEFT JOIN SEQSCAN s;]]
SELECT * FROM SEQSCAN t LEFT JOIN SEQSCAN s;]]
SELECT * FROM t LEFT JOIN s USING(i);]]
st/sql-luatest/seq_scan_test.lua:        res, err = box.execute([[SELECT * FROM SEQSCAN t
st/sql-luatest/seq_scan_test.lua:        res, err = box.execute([[SELECT * FROM t
SELECT * FROM t INNER JOIN s;]]
SELECT * FROM SEQSCAN t INNER JOIN s;]]
SELECT * FROM t INNER JOIN SEQSCAN s;]]
st/sql-luatest/seq_scan_test.lua:        res, err = box.execute([[SELECT * FROM SEQSCAN t INNER JOIN
SELECT * FROM t INNER JOIN s USING(i);]]
st/sql-luatest/seq_scan_test.lua:        res, err = box.execute([[SELECT * FROM SEQSCAN t
st/sql-luatest/seq_scan_test.lua:        res, err = box.execute([[SELECT * FROM t
SELECT * FROM t;]]
SELECT * FROM SEQSCAN t;]]
SELECT * FROM t WHERE i + 1 > 2;]]
SELECT * FROM t WHERE a > 2;]]
SELECT * FROM t, s;]]
SELECT * FROM SEQSCAN t, s;]]
SELECT * FROM t, SEQSCAN s;]]
SELECT dt FROM t1;]]
SELECT dt FROM t2;]]
SELECT * FROM t1 ORDER BY dt;]]
SELECT * FROM t1 ORDER BY dt DESC;]]
SELECT * FROM t2 ORDER BY dt;]]
SELECT * FROM t2 ORDER BY dt DESC;]]
SELECT count(*), dt FROM t1 GROUP BY dt;]]
SELECT count(*), dt FROM t2 GROUP BY dt;]]
SELECT * FROM (SELECT * FROM t1 LIMIT 3 OFFSET 1);]]
SELECT DISTINCT dt FROM t1;]]
CREATE VIEW v AS SELECT dt FROM t1;]]
SELECT * FROM v;]]
SELECT * FROM t1 LIMIT (SELECT dt FROM t1 LIMIT 1);]]
SELECT * FROM t1 LIMIT 1 OFFSET (SELECT dt FROM t1 LIMIT 1);]]
st/sql-luatest/datetime_test.lua:        local sql = [[INSERT INTO t SELECT
st/sql-luatest/datetime_test.lua:                      (SELECT dt from t2 LIMIT 1 OFFSET 1),
st/sql-luatest/datetime_test.lua:                      (SELECT dt from t2 LIMIT 1);]]
INSERT INTO t SELECT * from t1 LIMIT 1;]]
INSERT INTO t SELECT 1, dt from t1 LIMIT 1;]]
INSERT INTO t SELECT 2, dt from t1 LIMIT 1;]]
SELECT RETURN_TYPE(dt) FROM t2;]]
SELECT RETURN_DATETIME();]]
SELECT ABS(dt) from t2;]]
SELECT AVG(dt) from t2;]]
SELECT CHAR(dt) from t2;]]
SELECT CHARACTER_LENGTH(dt) from t2;]]
SELECT CHAR_LENGTH(dt) from t2;]]
SELECT COALESCE(NULL, dt, NULL, NULL) from t2;]]
SELECT COUNT(dt) from t2;]]
st/sql-luatest/datetime_test.lua:        local sql = [[SELECT GREATEST(dt,
st/sql-luatest/datetime_test.lua:                      (SELECT dt FROM t2 LIMIT 1 OFFSET 1)) from t2;]]
SELECT GROUP_CONCAT(dt) from t2;]]
SELECT HEX(dt) from t2;]]
SELECT IFNULL(dt, NULL) from t2;]]
SELECT LEAST(dt, (SELECT dt FROM t2 LIMIT 1 OFFSET 1)) from t2;]]
SELECT LENGTH(dt) from t2;]]
SELECT dt LIKE 'a' from t2;]]
SELECT LIKELIHOOD(dt, 0.5e0) from t2;]]
SELECT LIKELY(dt) from t2;]]
SELECT LOWER(dt) from t2;]]
SELECT MAX(dt) from t2;]]
SELECT MIN(dt) from t2;]]
SELECT NULLIF(dt, 1) from t2;]]
SELECT POSITION(dt, '1') from t2;]]
SELECT RANDOMBLOB(dt) from t2;]]
SELECT REPLACE(dt, '1', '2') from t2;]]
SELECT ROUND(dt) from t2;]]
SELECT SOUNDEX(dt) from t2;]]
SELECT SUBSTR(dt, 3, 3) from t2;]]
SELECT SUM(dt) from t2;]]
SELECT TOTAL(dt) from t2;]]
SELECT TRIM(dt) from t2;]]
SELECT TYPEOF(dt) from t2;]]
SELECT UNICODE(dt) from t2;]]
SELECT UNLIKELY(dt) from t2;]]
SELECT UPPER(dt) from t2;]]
SELECT dt || dt from t2;]]
SELECT "sql_datetime.is_datetime"(dt) FROM t2;]]
SELECT "sql_datetime.ret_datetime"(dt) FROM t2;]]
SELECT CAST(dt AS UNSIGNED) FROM t2;]]
SELECT CAST(dt AS INTEGER) FROM t2;]]
SELECT CAST(dt AS STRING) FROM t2;]]
SELECT CAST(dt AS NUMBER) FROM t2;]]
SELECT CAST(dt AS DOUBLE) FROM t2;]]
SELECT CAST(dt AS BOOLEAN) FROM t2;]]
SELECT CAST(dt AS VARBINARY) FROM t2;]]
SELECT CAST(dt AS SCALAR) FROM t2;]]
SELECT CAST(dt AS UUID) FROM t2;]]
SELECT CAST(dt AS DATETIME) FROM t2;]]
SELECT CAST(1 AS DATETIME);]]
SELECT CAST('1' AS DATETIME);]]
SELECT CAST('2001-01-01T01:00:00Z' AS DATETIME);]]
SELECT CAST(CAST(1 AS NUMBER) AS DATETIME);]]
SELECT CAST(1e0 AS DATETIME);]]
SELECT CAST(true AS DATETIME);]]
SELECT CAST(x'33' AS DATETIME);]]
SELECT CAST(CAST(dt AS SCALAR) AS DATETIME) FROM t2;]]
st/sql-luatest/datetime_test.lua:        local sql = [[SELECT CAST(
INSERT INTO t SELECT dt FROM t2;]]
INSERT INTO t SELECT dt FROM t2;]]
INSERT INTO t SELECT dt FROM t2;]]
INSERT INTO t SELECT dt FROM t2;]]
INSERT INTO t SELECT dt FROM t2;]]
INSERT INTO t SELECT dt FROM t2;]]
INSERT INTO t SELECT dt FROM t2;]]
INSERT INTO t SELECT dt FROM t2;]]
INSERT INTO t SELECT dt FROM t2;]]
INSERT INTO t2 SELECT CAST(dt AS SCALAR) FROM t2;]]
st/sql-luatest/datetime_test.lua:                      FOR EACH ROW BEGIN INSERT INTO tb SELECT new.dt; END;]])
INSERT INTO ta SELECT * FROM t1 LIMIT 3;]]
SELECT * FROM tb;]]
SELECT * FROM t1 JOIN t2 on t1.dt = t2.dt;]]
SELECT * FROM t1 LEFT JOIN t2 on t1.dt = t2.dt;]]
SELECT * FROM t1 INNER JOIN t2 on t1.dt = t2.dt;]]
SELECT -dt FROM t2;]]
SELECT dt + 1 FROM t2;]]
SELECT dt - 1 FROM t2;]]
SELECT dt / 2 FROM t2;]]
SELECT dt * 1 FROM t2;]]
SELECT dt % 1 FROM t2;]]
SELECT ~dt FROM t2;]]
SELECT dt >> 1 FROM t2;]]
SELECT dt << 1 FROM t2;]]
SELECT dt | 1 FROM t2;]]
SELECT dt & 1 FROM t2;]]
SELECT NOT dt FROM t2;]]
SELECT dt AND true FROM t2;]]
SELECT dt OR true FROM t2;]]
SELECT dt > 1 FROM t2;]]
SELECT dt < '1' FROM t2;]]
SELECT dt == '2001-01-01T01:00:00Z' FROM t2;]]
SELECT dt >= CAST(1 AS NUMBER) FROM t2;]]
SELECT dt <= 1e0 FROM t2;]]
SELECT dt > true FROM t2;]]
SELECT dt < x'33' FROM t2;]]
SELECT dt == CAST(dt AS SCALAR) FROM t2;]]
SELECT dt INSERT INTO t SELECT dt FROM t2;
SELECT * FROM t;]]
SELECT ?;]]
SELECT $1;]]
SELECT typeof(now());]]
SELECT now(), now() FROM (values(1), (2), (3));]]
SELECT date_part('millennium', ?);]]
SELECT date_part('century', ?);]]
SELECT date_part('decade', ?);]]
SELECT date_part('year', ?);]]
SELECT date_part('quarter', ?);]]
SELECT date_part('month', ?);]]
SELECT date_part('week', ?);]]
SELECT date_part('day', ?);]]
SELECT date_part('dow', ?);]]
SELECT date_part('doy', ?);]]
SELECT date_part('hour', ?);]]
SELECT date_part('minute', ?);]]
SELECT date_part('second', ?);]]
SELECT date_part('millisecond', ?);]]
SELECT date_part('microsecond', ?);]]
SELECT date_part('nanosecond', ?);]]
SELECT date_part('epoch', ?);]]
SELECT date_part('timezone_offset', ?);]]
SELECT $1 - $2;]]
SELECT $1 + $2;]]
SELECT $1 + $2;]]
SELECT $1 - $2;]]
SELECT $1 + $2;]]
SELECT $1 - $2;]]
SELECT $1 - $2;]]
SELECT $1 + $2;]]
SELECT CAST('2000-02-29T01:00:00Z' AS DATETIME);]]
SELECT CAST('2001-02-29T01:00:00Z' AS DATETIME);]]
SELECT CAST(#v AS DATETIME);]]
SELECT CAST(#v AS DATETIME);]]
SELECT CAST({'year': 1.1} AS DATETIME);]]
SELECT CAST({'year': 1.1e0} AS DATETIME);]]
SELECT CAST({'year': 1} AS DATETIME);]]
SELECT CAST(#v AS INTERVAL);]]
SELECT CAST(#v AS INTERVAL);]]
SELECT CAST({'year': 1.0} AS INTERVAL);]]
SELECT CAST({'year': 1.e0} AS INTERVAL);]]
SELECT CAST({'year': 1} AS INTERVAL);]]
SELECT typeof(dt - dt) FROM t;]]
SELECT dt - dt FROM t;]]
SELECT typeof(dt - itv) FROM t;]]
SELECT dt - itv FROM t;]]
SELECT typeof(dt + itv) FROM t;]]
SELECT dt + itv FROM t;]]
SELECT typeof(itv - itv) FROM t;]]
SELECT itv - itv FROM t;]]
SELECT typeof(itv + itv) FROM t;]]
SELECT itv + itv FROM t;]]
SELECT typeof(?);]]
SELECT typeof(?);]]
SELECT typeof(?);]]
SELECT typeof(?);]]
SELECT * FROM t WHERE a IS NULL;
SELECT ROUND(1.13154);]]
SELECT ROUND(-1123432.13154);]]
SELECT ROUND(9999123432.13154, 3);]]
SELECT ROUND(-562323432.13154, 10000000);]]
SELECT ROUND(-562323432.13154, -10000000);]]
SELECT ROUND(113154);]]
SELECT ROUND(-1123432);]]
SELECT ROUND(9999123432, 3);]]
SELECT ROUND(-562323432, 10000000);]]
SELECT ROUND(-562323432, -10000000);]]
SELECT typeof(ROUND(?));]]
